version: '3.8'

services:
  spectraops-backend:
    build: 
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: spectraops-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_PATH=/usr/src/app/data/spectraops.db
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - JWT_EXPIRES_IN=24h
      - ALLOWED_ORIGINS=https://spectraops.com,https://www.spectraops.com
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_SECURE=${SMTP_SECURE:-false}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - HIBP_API_KEY=${HIBP_API_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAIN=spectraops.com
    volumes:
      - spectraops-data:/usr/src/app/data
      - spectraops-logs:/usr/src/app/logs
      - spectraops-ssl:/usr/src/app/ssl
      - spectraops-reports:/usr/src/app/reports
    networks:
      - spectraops-network
    labels:
      - "com.spectraops.description=SpectraOps Backend API"
      - "com.spectraops.version=1.0.0"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: spectraops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - spectraops-ssl:/etc/nginx/ssl:ro
      - ../frontend:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - spectraops-backend
    networks:
      - spectraops-network
    labels:
      - "com.spectraops.description=SpectraOps Nginx Reverse Proxy"

  redis:
    image: redis:alpine
    container_name: spectraops-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-spectraops123}
    volumes:
      - redis-data:/data
    networks:
      - spectraops-network
    labels:
      - "com.spectraops.description=Redis Cache and Session Store"

  watchtower:
    image: containrrr/watchtower
    container_name: spectraops-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    labels:
      - "com.spectraops.description=Auto-update containers"

volumes:
  spectraops-data:
    driver: local
  spectraops-logs:
    driver: local
  spectraops-ssl:
    driver: local
  spectraops-reports:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  spectraops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16